/*
 * Copyright (c) 2018, 2019 by Delphix. All rights reserved.
 */

syntax = "proto3";

import "dlpx/virtualization/common.proto";

option java_multiple_files = true;

package com.delphix.virtualization.platform;

/*
 * NOTE:
 * Currently, there are some operations that do not expect a return value -
 * e.g - pre-snapshot (direct and staged), start staging, stop staging etc.
 * So this file contains empty result types for all such operations as a
 * placeholder. Defining a valid return type as a placeholder and still return
 * empty message helps if something needs to be added as part of the result in
 * future.
 */

/* ERROR REPORTING */

/*
 * This indicates that a generic problem has been detected.
 * These include syntax errors and any other kind of errors.
 */
message GenericPluginError {
  string message = 1;
  string type = 2;
  string call_stack = 3;
}

/*
 * This indicates that a plugin elected not to handle an error raised by a
 * library call.
 *  - error_id can be used to look up the original exception from the callback
      worker.
 *  - call_stack gives the location in Python code whence the erroring library
      call was executed.
 */
message UnhandledLibraryError {
  uint32 error_id = 1;
  string message = 2;
  string call_stack = 3;
}

/*
 * This indicates that there was a Plugin runtime error for example if the
 * implemented operation returns incorrect typed object back.
 */
message PluginRuntimeError {
  string message = 1;
  string call_stack = 2;
}

/*
 * This indicates that one of our generated classes raised an error. For
 * example, such an error will happen if the schema defines a string property,
 * but the plugin code tries to set it to an integer.
 */
message GeneratedClassesError {
  string message = 1;
  string call_stack = 2;
}

/*
 * This indicates that there was a UserError raised by plugin author.
 */
message UserError {
  string message = 1;
  string action = 2;
  string output = 3;
}

/*
 * More error types will get inserted here as more specific errors are created.
 * When a new error is added, they should be put to the end of the list,
 * incrementing the field tag by one. The number should never be modified to
 * guarantee backwards compatibility.
 */
message PluginErrorResult {
  oneof error {
    GenericPluginError generic_plugin_error = 1;
    UnhandledLibraryError unhandled_library_error = 2;
    PluginRuntimeError plugin_runtime_error = 3;
    GeneratedClassesError generated_classes_error = 4;
    UserError user_error = 5;
  }
}

/* DISCOVERY */

message RepositoryDiscoveryRequest {
  com.delphix.virtualization.common.RemoteConnection source_connection = 1;
}

message RepositoryDiscoveryResult {
  repeated com.delphix.virtualization.common.Repository repositories = 1;
}

message RepositoryDiscoveryResponse {
  oneof result {
    RepositoryDiscoveryResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message SourceConfigDiscoveryRequest {
  com.delphix.virtualization.common.RemoteConnection source_connection = 1;
  com.delphix.virtualization.common.Repository repository = 2;
}

message SourceConfigDiscoveryResult {
  repeated com.delphix.virtualization.common.SourceConfig source_configs = 1;
}

message SourceConfigDiscoveryResponse {
  oneof result {
    SourceConfigDiscoveryResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

/* DIRECT LINKING */

message DirectPreSnapshotRequest {
  com.delphix.virtualization.common.DirectSource direct_source = 1;
  com.delphix.virtualization.common.Repository repository = 2;
  com.delphix.virtualization.common.SourceConfig source_config = 3;
}

message DirectPreSnapshotResult { }

message DirectPreSnapshotResponse {
  oneof result {
    DirectPreSnapshotResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message DirectPostSnapshotRequest {
  com.delphix.virtualization.common.DirectSource direct_source = 1;
  com.delphix.virtualization.common.Repository repository = 2;
  com.delphix.virtualization.common.SourceConfig source_config = 3;
}

message DirectPostSnapshotResult {
  com.delphix.virtualization.common.Snapshot snapshot = 1;
}

message DirectPostSnapshotResponse {
  oneof result {
    DirectPostSnapshotResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

/* STAGED LINKING */

message StagedPreSnapshotRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
  com.delphix.virtualization.common.SnapshotParameters snapshot_parameters = 4;
}

message StagedPreSnapshotResult { }

message StagedPreSnapshotResponse {
  oneof result {
    StagedPreSnapshotResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message StagedPostSnapshotRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
  com.delphix.virtualization.common.SnapshotParameters snapshot_parameters = 4;
}

message StagedPostSnapshotResult {
  com.delphix.virtualization.common.Snapshot snapshot = 1;
}

message StagedPostSnapshotResponse {
  oneof result {
    StagedPostSnapshotResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message StartStagingRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
}

message StartStagingResult { }

message StartStagingResponse {
  oneof result {
    StartStagingResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message StopStagingRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
}

message StopStagingResult { }

message StopStagingResponse {
  oneof result {
    StopStagingResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message StagedStatusRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
}

message StagedStatusResult {
  enum Status {
    ACTIVE = 0;
    INACTIVE = 1;
  }
  Status status = 1;
}

message StagedStatusResponse {
  oneof result {
    StagedStatusResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message StagedWorkerRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
}

message StagedWorkerResult { }

message StagedWorkerResponse {
  oneof result {
    StagedWorkerResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message StagedMountSpecRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.StagedSource staged_source = 2;
}

message StagedMountSpecResult {
  com.delphix.virtualization.common.SingleEntireMount staged_mount = 1;
  com.delphix.virtualization.common.OwnershipSpec ownership_spec = 2;
}

message StagedMountSpecResponse {
  oneof result {
    StagedMountSpecResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

/* PROVISIONING */

message ConfigureRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.Snapshot snapshot = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message ConfigureResult {
  com.delphix.virtualization.common.SourceConfig source_config = 1;
}

message ConfigureResponse {
  oneof result {
    ConfigureResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message UnconfigureRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
  bool deleteFlag = 4;
}

message UnconfigureResult { }

message UnconfigureResponse {
  oneof result {
    UnconfigureResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message ReconfigureRequest {
  com.delphix.virtualization.common.Snapshot snapshot = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
  com.delphix.virtualization.common.Repository repository = 4;
}

message ReconfigureResult {
  com.delphix.virtualization.common.SourceConfig source_config = 1;
}

message ReconfigureResponse {
  oneof result {
    ReconfigureResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message StartRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message StartResult { }

message StartResponse {
  oneof result {
    StartResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message StopRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message StopResult { }

message StopResponse {
  oneof result {
    StopResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message VirtualPreSnapshotRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message VirtualPreSnapshotResult { }

message VirtualPreSnapshotResponse {
  oneof result {
    VirtualPreSnapshotResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message VirtualPostSnapshotRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message VirtualPostSnapshotResult {
  com.delphix.virtualization.common.Snapshot snapshot = 1;
}

message VirtualPostSnapshotResponse {
  oneof result {
    VirtualPostSnapshotResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message VirtualStatusRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message VirtualStatusResult {
  enum Status {
    ACTIVE = 0;
    INACTIVE = 1;
  }
  Status status = 1;
}

message VirtualStatusResponse {
  oneof result {
    VirtualStatusResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message InitializeRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message InitializeResult { }

message InitializeResponse {
  oneof result {
    InitializeResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message VirtualMountSpecRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.VirtualSource virtual_source = 2;
}

message VirtualMountSpecResult {
  com.delphix.virtualization.common.OwnershipSpec ownership_spec = 1;
  repeated com.delphix.virtualization.common.SingleSubsetMount mounts = 2;
}

message VirtualMountSpecResponse {
  oneof result {
    VirtualMountSpecResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

/* UPGRADE */

message UpgradeRequest {
  enum Type {
        SOURCECONFIG = 0;
        REPOSITORY = 1;
        LINKEDSOURCE = 2;
        VIRTUALSOURCE = 3;
        SNAPSHOT = 4;
  }
  map<string, string> pre_upgrade_parameters = 1;
  Type type = 2;
  repeated string migration_ids = 3;
}

message UpgradeResult {
  map<string, string> post_upgrade_parameters = 1;
}

message UpgradeResponse {
  oneof result {
    UpgradeResult return_value = 1;
    PluginErrorResult error = 2;
  }
}
