/*
 * Copyright (c) 2018, 2019 by Delphix. All rights reserved.
 */

syntax = "proto3";

option java_multiple_files = true;

package com.delphix.virtualization.common;

message RemoteConnection {
  RemoteEnvironment environment = 1;
  RemoteUser user = 2;
}

message RemoteEnvironment {
  string name = 1;
  string reference = 2;
  RemoteHost host = 3;
}

message RemoteHost {
  string name = 1;
  string reference = 2;
  string binary_path = 3;
  string scratch_path = 4;
}

message RemoteUser {
  string name = 1;
  string reference = 2;
}

message LinkedSource {
  string guid = 1;
  PluginDefinedObject parameters = 2;
}

message DirectSource {
  RemoteConnection connection = 1;
  LinkedSource linked_source = 2;
}

// Stuff that always mounts the entire ZFS filesystem
message SingleEntireMount {
  RemoteEnvironment remote_environment = 1;
  string mount_path = 2;
  string shared_path = 3;
}

// Stuff that can optionally mount only a subset of the ZFS filesystem
message SingleSubsetMount {
  RemoteEnvironment remote_environment = 1;
  string mount_path = 2;
  string shared_path = 3; // not supported on Windows
}

message StagedSource {
  LinkedSource linked_source = 1;
  RemoteConnection source_connection = 2;
  SingleEntireMount staged_mount = 3;
  RemoteConnection staged_connection = 4;
}

message VirtualSource {
  string guid = 1;
  RemoteConnection connection = 2;
  repeated SingleSubsetMount mounts = 3;
  PluginDefinedObject parameters = 4;
}

message SourceConfig {
  string name = 1;
  PluginDefinedObject parameters = 2;
}

message Repository {
  string name = 1;
  PluginDefinedObject parameters = 2;
}

message Snapshot {
  PluginDefinedObject parameters = 1;
}

message SnapshotParameters {
  PluginDefinedObject parameters = 1;
}

/*
 * A PluginDefinedObject is a serialized JSON representation of an object that conforms to a schema provided by the
 * plugin. Typically, this will be deserialized to a language-specific object for use by the plugin. For example,
 * deserialization of snapshot metadata for a Python plugin would use the Python
 * generated.definitions.SnapshotDefinition class.
 */
message PluginDefinedObject {
  string json = 1;
}

message OwnershipSpec {
  int32 uid = 1;
  int32 gid = 2;
}
